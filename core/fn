#!/bin/bash

service::get_dirs() {
  string::split : $PLUGIN_SERVICE_SERVICES
}

service::get_path() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[service::get_path] name is required"
    exit 1
  fi

  echo $PLUGIN_SERVICE_SERVICES/$name
}

service::get_mod_path() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[$(timestamp)][service::get_mod_path] name is required"
    exit 1
  fi

  local service_path=$(service::get_path $name)
  echo $service_path/mod
}

service::get_config_path() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[service::get_config_path] name is required"
    exit 1
  fi

  echo $PLUGIN_SERVICE_SERVICES/$name/config
}

service::get_repo_url() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[$(timestamp)][service::get_repo_url] name is required"
    exit 1
  fi

  echo ${PLUGIN_SERVICE_PREFIX}${name}
}

service::list() {
  local avaliable_service_dirs=$(service::get_dirs)
  log "List all available services"
  log ""

  for service_dir in $avaliable_service_dirs; do
    # local namespace=$(echo $service_dir | awk -F '/' '{print $(NF-0)}')
    local namespace=$(string::split_last_element '/' $service_dir)
    if [ ! -d $service_dir ]; then
      log "  namespace: $namespace ($service_dir)"
      log "    (no avaliable services)"
      log ""
      continue
    fi

    local service_names=$(ls $service_dir)
    # local service_count=$(echo $service_names | wc -w)
    local service_count=0
    for service_name in $service_names; do
      local service_path=$service_dir/$service_name

      # Check is a real service
      if [ -f $service_path/${DOCKER_COMPOSE_FILE_NAME} ]; then
        service_count=$((service_count + 1))
      fi
    done

    log "  namespace: $namespace (total: $service_count) ($service_dir)"
    local index=0
    for service_name in $service_names; do
      local service_path=$service_dir/$service_name

      # Check is a real service
      if [ -f $service_path/${DOCKER_COMPOSE_FILE_NAME} ]; then
        index=$(number::step index)
        log "    $(color::success "$index $service_name")"
      fi
    done

    if [ $service_count -eq 0 ]; then
      log "    (no avaliable services)"
    fi

    log ""
  done
}

service::list_sub_services() {
  local name=$1
  local service_path=$(service::get_path $name)
  if [ "$service_path" = "" ]; then
    log::error "[$(timestamp)][service] service($name) not found"
    exit 1
  fi

  if [ ! -d "$service_path" ]; then
    log::error "[$(timestamp)][service] service($name) not found"
    exit 1
  fi

  # @TODO
  service::load_config $name

  cd $service_path
  $DOCKER_COMPOSE -f ${DOCKER_COMPOSE_FILE_NAME} ps --services
}

service::run() {
  # @TODO
  which docker-compose >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    zmicro package install docker@latest
    zmicro package install docker-compose@latest
  fi

  # if not v2, install v2
  docker-compose -v | grep v2 >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    zmicro package install docker-compose@latest
  fi

  which docker >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    log::error "[service::run] unexpect error: docker cli not found"
    exit 1
  fi

  docker network inspect ${PLUGIN_SERVICE_DOCKER_NETWORK} >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    docker network create ${PLUGIN_SERVICE_DOCKER_NETWORK} >>/dev/null
  fi

  local name=$1
  local commands=${@:2}
  local service_path=$(service::get_path $name)

  log::debug "[$(timestamp)][service] PLUGIN_SERVICE_SERVICES: $PLUGIN_SERVICE_SERVICES"
  log::debug "[$(timestamp)][service] service name: $name"
  log::debug "[$(timestamp)][service] service path: $service_path"
  log::debug "[$(timestamp)][service] service command: $commands"

  if [ "$service_path" = "" ]; then
    log::error "[$(timestamp)][service] service($name) not found"
    exit 1
  fi

  if [ ! -d "$service_path" ]; then
    log::error "[$(timestamp)][service] service($name) not found"
    # exit 1
    log::info "[$(timestamp)][service] try to install service($name) ..."
    service::install $name

    # rerun
    service::run "$@"
    return
  fi

  # @TODO
  service::load_config $name

  # #@TODO
  # service::run_check $name
  # if [ "$?" != "0" ]; then
  #   log::error "[service::run] service run check error"
  #   exit 1
  # fi

  cd $service_path
  log::debug "[$(timestamp)][service] docker-compose -f ${DOCKER_COMPOSE_FILE_NAME} $commands"

  # TESTING MODE
  if [ "$TESTING" = "true" ]; then
    # test dir
    cd $service_path/test
    #
    export DOCKER_COMPOSE_FILE_NAME=$DOCKER_COMPOSE_TEST_FILE_NAME
  fi

  $DOCKER_COMPOSE -f ${DOCKER_COMPOSE_FILE_NAME} $commands
}

service::run_check() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[service::run_check] name is required"
    exit 1
  fi

  local service_check_path="$(service::get_path $name)/check"
  if [ ! -f "$service_check_path" ]; then
    exit 0
  fi

  # @PERMISSION should add permission for check file on config file, which will update service config
  local config_file=$(service::get_configs_path $name)
  if [ ! -f "$config_file" ]; then
    sudo touch $config_file
  fi
  if [ ! -r "$config_file" ] || [ ! -w "$config_file" ]; then
    sudo chown -R $USER $config_file
  fi

  if [ "$DEBUG" = "true" ]; then
    log::info "[DEBUG][service][$name]: $SERVICE_CONFIG"
    cat $SERVICE_CONFIG
  fi

  # custom check
  # $service_check_path
  # @TODO use . cannot load env
  . $service_check_path
}

service::run_check_ok() {
  export SERVICE_RUN_CHECK_OK=true
}

service::get_config() {
  local service_name=$1

  local service_path=$(service::get_path $service_name)
  if [ "$service_path" = "" ]; then
    log::error "[$(timestamp)][service] service($service_name) not found"
    exit 1
  fi

  local service_config=$service_path/${DOCKER_COMPOSE_FILE_NAME}
  if [ ! -f $service_config ]; then
    log::error "[$(timestamp)][service] service($service_name) config(${DOCKER_COMPOSE_FILE_NAME}) not found"
  fi

  echo $service_config
}

service::get_data_path() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[service::get_data_path] name is required"
    exit 1
  fi

  local path="$PLUGIN_SERVICE_DATA/$name"
  if [ ! -d "$path" ]; then
    if [ ! -w "$PLUGIN_SERVICE_DATA" ]; then
      sudo mkdir -p $path
      sudo chown $USER $path
    else
      mkdir -p $path
    fi
  fi

  echo $path
}

service::get_logs_path() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[service::get_logs_path] name is required"
    exit 1
  fi

  local path="$PLUGIN_SERVICE_LOGS/$name"
  if [ ! -d "$path" ]; then
    if [ ! -w "$PLUGIN_SERVICE_LOGS" ]; then
      sudo mkdir -p $path
      sudo chown $USER $path
    else
      mkdir -p $path
    fi
  fi

  echo $path
}

service::get_configs_path() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[service::get_logs_path] name is required"
    exit 1
  fi

  local path="$PLUGIN_SERVICE_CONFIGS/$name"
  if [ ! -d "$path" ]; then
    if [ ! -w "$PLUGIN_SERVICE_CONFIGS" ]; then
      sudo mkdir -p $path
      sudo chown $USER $path
    else
      mkdir -p $path
    fi
  fi

  echo $path
}

service::load_mod() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[$(timestamp)][service::load_mod] name is required"
    exit 1
  fi

  local service_mod_path=$(service::get_mod_path $name)
  if [ ! -f $service_mod_path ]; then
    log::error "[$(timestamp)][service::load_mod] name is required"
    exit 1
  fi

  config::load_file $service_mod_path
}

service::load_config() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[$(timestamp)][service::load_config] name is required"
    exit 1
  fi

  # @TODO
  export SERVICE_DIR=$(service::get_path $name)
  if [ ! -d "$SERVICE_DIR" ]; then
    log::error "[$(timestamp)][service::load_config] service($name) is not invalid"
    exit 1
  fi

  export SERVICE_DATA=$(service::get_data_path $name)
  export SERVICE_LOGS=$(service::get_logs_path $name)
  export SERVICE_CONFIGS=$(service::get_configs_path $name)
  export SERVICE_CONFIG=$SERVICE_CONFIGS/config

  # TESTING MODE
  if [ "$TESTING" = "true" ]; then
    SERVICE_CONFIG=$SERVICE_DIR/test/.env
  fi

  if [ -z "$SERVICE_DATA" ]; then
    log::error "[service::run] SERVICE_DATA is empty"
    exit 1
  fi

  if [ -z "$SERVICE_LOGS" ]; then
    log::error "[service::run] SERVICE_LOGS is empty"
    exit 1
  fi

  if [ "$SERVICE_CONFIG" = "/config" ]; then
    log::error "[service::run] SERVICE_CONFIG is not valid"
    exit 1
  fi

  local service_config_path=$(service::get_config_path $name)
  if [ -f "$service_config_path" ]; then
    config::load_file $service_config_path
  fi

  # log::info "SERVICE_DATA: $SERVICE_DATA"
  # log::info "SERVICE_LOGS: $SERVICE_LOGS"
  # log::info "SERVICE_CONFIG: $SERVICE_CONFIG"

  # load global
  if [ -f "$SERVICE_CONFIG" ]; then
    # config::load_file $SERVICE_CONFIG
    # use export to global instead of load to local
    config::export $SERVICE_CONFIG

    # @TODO
    if [ -n "$SERVICE_NETWORK" ]; then
      export SERVICE_NETWORK=$SERVICE_NETWORK
    fi
  else
    sudo touch $SERVICE_CONFIG
    sudo chown $USER $SERVICE_CONFIG
  fi

  #@TODO
  service::run_check $name
  if [ "$?" != "0" ]; then
    log::error "[service::run] service run check error"
    exit 1
  fi

  # check maybe update config, so load config again
  # config::load_file $SERVICE_CONFIG
  # use export to global instead of load to local
  config::export $SERVICE_CONFIG
}

service::switch() {
  local name=$1
  local version=$2

  if [ -z "$name" ]; then
    log::error "[$(timestamp)][service::switch] name is required"
    exit 1
  fi

  if [ -z "$version" ]; then
    log::error "[$(timestamp)][service::switch] version is required"
    exit 1
  fi

  if [ "$version" = "latest" ]; then
    version=master
  fi

  service::clone $name $version
}

service::clone() {
  local name=$1
  local version=$2
  local alias_=$3
  local service_repo_url=""

  # @TODO CHECK IS HTTP URL
  if [ "${version:0:4}" = "http" ]; then
    service_repo_url=$version
    version=""
  fi

  local error_log=$(os::tmp_file)

  if [ -z "$name" ]; then
    log::error "[$(timestamp)][service::clone] name is required"
    exit 1
  fi

  if [ -z "$version" ]; then
    version=master
  fi

  if [ -z "$alias_" ]; then
    alias_=$name
  fi

  # using smart proxy
  net::using_smart_proxy 2>&1

  local service_path=$(service::get_path $alias_)
  if [ -z "$service_repo_url" ]; then
    service_repo_url=$(service::get_repo_url $name)
  fi

  if [ ! -d "$service_path" ]; then
    curl -I $service_repo_url 2>>/dev/null | head -n 1 | grep 404 >>/dev/null 2>&1
    if [ "$?" = "0" ]; then
      log::error "[$(timestamp)][service::clone] service ${name} is not available"
      exit 1
    fi

    os::git clone $service_repo_url -b $version $service_path >>$ZMICRO_LOG_COMMON_PATH 2>$error_log
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)][service::clone] error $name($version) ..."
      cat $error_log
      exit 1
    fi
  else
    cd $service_path
    local current_tag=$(git describe --tags)
    if [ "$current_tag" != "$version" ] && [ "$version" != "master" ]; then
      # git fetch origin $version >> $ZMICRO_LOG_UPDATE_PATH 2>>$ZMICRO_LOG_ERROR_PATH
      os::git fetch origin >>$ZMICRO_LOG_UPDATE_PATH 2>$error_log
      if [ "$?" != "0" ]; then
        echo "[$(timestamp)][service::clone] git fetch error ${name} ..."
        cat $error_log
        exit -1
      fi

      local tag=$version
      # 1. if tag branch exist, remove it
      git branch | grep $tag >>/dev/null 2>&1
      if [ "$?" = "0" ]; then
        git branch -D $tag >>/dev/null 2>&1
      fi

      # 2. checkout tag branch
      git checkout -b $version $tag >>$ZMICRO_LOG_UPDATE_PATH 2>$error_log
      if [ "$?" != "0" ]; then
        echo "[$(timestamp)][service::clone] git checkout error ${name} - ${tag} ..."
        cat $error_log
        exit -1
      fi
    fi

    if [ ! -r ".git/FETCH_HEAD" ] || [ ! -w ".git/FETCH_HEAD" ]; then 
      sudo chown -R $USER .git/FETCH_HEAD
    fi

    # 3. update tag branch
    os::git pull origin $version >>$ZMICRO_LOG_UPDATE_PATH 2>$error_log
    if [ "$?" != "0" ]; then
      echo "[$(timestamp)][service::clone] git pull error ${name} ..."
      cat $error_log
      exit -1
    fi
  fi
}

service::install() {
  local name=$1
  local version=$2
  local alias_=$3
  if [ -z "$name" ]; then
    log::error "[$(timestamp)][service::install] name is required"
    exit 1
  fi

  if [ -z "$version" ]; then
    version="master"
  fi

  if [ "$version" = "latest" ]; then
    version="master"
  fi

  if [ -z "$alias_" ]; then
    alias_=$name
  fi

  # download
  service::clone $name $version $alias_

  # start service
  if [ "$SERVICE_AUTO_START" = "true" ]; then
    service::run $name up -d
  fi

  log::info "[$(timestamp)] succeed to install service ${alias_}."
  cat <<EOF
#####################################################  
# 更多用法
# 1. 查看日志
$ zmicro service logs ${alias_} -f --tail 100
# 2. 修改配置 
$ zmicro service edit config ${alias_}
# 3. 重启服务
$ zmicro service restart ${alias_}
# 4. 升级服务
$ zmicro service upgrade ${alias_}
# 5. 关闭服务
$ zmicro service stop ${alias_}
#####################################################

EOF
}

service::remove() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[$(timestamp)][service::remove] name is required"
    exit 1
  fi

  local service_path=$(service::get_path $name)
  if [ ! -d "$service_path" ]; then
    log::error "[$(timestamp)][service::remove] service($name) not found"
    exit 1
  fi

  # stop service
  service::run $name down --remove-orphans

  # remove service dir
  rm -rf $service_path
}

service::update() {
  local name=$1
  local args=${@:2}
  if [ -z "$name" ]; then
    log::error "[$(timestamp)][service::update] name is required"
    exit 1
  fi

  # update repo
  service::clone $name $version

  # pull
  service::run $name pull $args
  # build
  service::build $name
  # rollup
  service::run $name down $args
  service::run $name up -d $args
}

service::version() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[$(timestamp)][service::version] name is required"
    exit 1
  fi

  # @TODO
  if [ ! -f "$(service::get_mod_path $name)" ]; then
    echo "-"
    return
  fi

  service::load_mod $name
  echo $VERSION
}

service::description() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[$(timestamp)][service::description] name is required"
    exit 1
  fi

  if [ ! -f "$(service::get_mod_path $name)" ]; then
    echo "No Description"
    return
  fi

  service::load_mod $name
  echo $DESCRIPTION
}

service::get_image_path() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[$(timestamp)][service::image] name is required"
    exit 1
  fi

  local service_path=$(service::get_path $name)
  echo $service_path/image/Dockerfile
}

service::has_images() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[$(timestamp)][service::image] name is required"
    exit 1
  fi

  local service_path=$(service::get_path $name)
  if [ -d "$service_path/images" ]; then
    echo "true"
  elif [ -d "$service_path/image" ]; then
    echo "true"
  else
    echo "false"
  fi
}

service::build() {
  local name=$1
  local args=${@:2}
  if [ -z "$name" ]; then
    log::error "[$(timestamp)][service::get_mod_path] name is required"
    exit 1
  fi

  if [ "$(service::has_images $name)" = "true" ]; then
    # log::info "Build image ..."
    service::run $name build $args
  fi
}

service::apply() {
  run::js $ZMICRO_PLUGINS_PATH/service/core/js/apply.js "$@"
}

service::version_echo() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[$(timestamp)][service][version_echo] service name is required"
    exit 1
  fi

  version::service $name
}

service::is_running() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[$(timestamp)][service][is_running] service name is required"
    exit 1
  fi

  local count=$(service::run $name ps -q | wc -l)
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)][service][is_running] service($name) error: ${count}"
    echo "false"
    return
  fi

  if [ "$count" -gt "0" ]; then
    echo "true"
  else
    echo "false"
  fi
}

service::config() {
  config::set_filepath $SERVICE_CONFIG
  config::set_ignore_if_exists $SERVICE_CONFIG

  config::inquirer "$@"

  config::unset_filepath
  config::unset_ignore_if_exists
}

export -f service::get_dirs
export -f service::get_path

export -f service::get_mod_path
export -f service::get_config_path
export -f service::get_repo_url
export -f service::get_image_path
export -f service::has_images

export -f service::get_config

export -f service::get_data_path
export -f service::get_logs_path
export -f service::get_configs_path

export -f service::load_mod
export -f service::load_config

export -f service::run
export -f service::list
export -f service::list_sub_services

export -f service::clone
export -f service::switch

export -f service::install
export -f service::remove
export -f service::update

export -f service::build

export -f service::version
export -f service::description

export -f service::run_check
export -f service::run_check_ok

export -f service::apply

export -f service::version_echo

export -f service::is_running

export -f service::config
